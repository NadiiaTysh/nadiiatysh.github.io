{"version":3,"sources":["source/bus/taskCard/types.js","source/bus/taskCard/reducer.js","source/bus/taskList/types.js","source/bus/taskList/reducer.js","source/bus/globalized/types.js","source/bus/globalized/reducer.js","source/init/rootReducer.js","source/init/middleware.js","source/init/store.js","source/api/config.js","source/api/index.js","source/bus/taskList/actions.js","source/bus/globalized/actions.js","source/bus/globalized/hooksGlobalized/useGlobalizedSet.js","source/bus/taskList/hooks/useListFetch.js","source/bus/taskCard/actions.js","source/bus/taskCard/hooks/formElements/initialValues.js","source/bus/taskCard/hooks/formElements/validationSchema.js","source/bus/sharedElements/tagsArray.js","source/bus/taskCard/components/tag.js","source/bus/taskCard/index.js","source/bus/taskCard/hooks/useTaskFetch.js","source/bus/taskList/index.js","source/index.js","app.js","serviceWorker.js","index.js"],"names":["types","Object","freeze","TASK_START_FETCHING","TASK_STOP_FETCHING","TASK_SET_FETCHING_ERROR","TASK_ADD","TASK_EDIT","TASK_REMOVE","TASK_FETCH","initialState","data","isFetching","error","LIST_START_FETCHING","LIST_STOP_FETCHING","LIST_SET_FETCHING_ERROR","LIST_FILL","LIST_FETCH_ASYNC","GLOBALIZED_NEW_TASK","GLOBALIZED_SELECT_TASK","GLOBALIZED_HIDE_TASK","isShownSelectedCard","isShownBlankCard","filteredData","rootReducer","combineReducers","task","state","type","payload","list","reverse","globalized","composeEnhancers","createLogger","duration","collapsed","colors","title","action","prevState","nextState","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","middleware","thunk","store","createStore","applyMiddleware","root","api","todos","getFetch","fetch","method","headers","addFetch","body","JSON","stringify","editFetch","hash","removeFetch","listActions","startFetching","stopFetching","setFetchingError","fillList","getListFetch","dispatch","a","response","status","json","globalizedActions","useGlobalizedSet","useDispatch","useEffect","useSelector","receivedData","length","useListFetch","handleNewTask","handleSelectItem","filter","item","taskActions","addTask","editTask","removeTask","addTaskFetch","editTaskFetch","removeTaskFetch","initialValues","completed","description","deadline","tag","checklist","validationSchema","Yup","shape","min","required","tagsArray","name","className","Tag","props","tagsJsx","map","i","classTag","cx","formik","values","key","id","onClick","row","setFieldValue","target","TaskCard","date","Date","parse","useState","setHours","startDate","setStartDate","completedTask","setCompleted","useFormik","enableReinitialize","onSubmit","formattedValues","setTimeout","undefined","toISOString","buttonCompleted","handleCompleted","handleStartDate","handleDeleteTask","e","preventDefault","useTaskFetch","handleSubmit","onReset","handleReset","placeholder","onChange","handleChange","value","selected","minDate","dateFormat","errors","dirty","TaskList","spinnerJsx","listJsx","element","tagTypeArray","dayFormatted","moment","format","taskCompleted","Source","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.98581f6b.chunk.js","sourcesContent":["export const types = Object.freeze({\r\n    // Sync\r\n    TASK_START_FETCHING: 'TASK_START_FETCHING',\r\n    TASK_STOP_FETCHING: 'TASK_STOP_FETCHING',\r\n    TASK_SET_FETCHING_ERROR: 'TASK_SET_FETCHING_ERROR',\r\n    TASK_ADD: 'TASK_ADD',\r\n    TASK_EDIT: 'TASK_EDIT',\r\n    TASK_REMOVE: 'TASK_REMOVE',\r\n\r\n    // Async\r\n    TASK_FETCH: 'TASK_FETCH',\r\n})","// Types\r\nimport { types } from './types';\r\n\r\nconst initialState = {\r\n    data: {},\r\n    isFetching: false,\r\n    error: null,\r\n};\r\n\r\nexport const taskReducer = (state = initialState, {type, payload}) => {\r\n    switch (type) {\r\n        case types.TASK_ADD:\r\n            return {\r\n                ...state,\r\n                data: payload,\r\n            };\r\n        case types.TASK_EDIT:\r\n            return {\r\n                ...state,\r\n            data: payload,\r\n            };\r\n        case types.TASK_REMOVE:\r\n            return {\r\n                ...state,\r\n            }\r\n        case types.TASK_START_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: true,\r\n            };\r\n        case types.TASK_STOP_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: false,\r\n            };\r\n        case types.TASK_SET_FETCHING_ERROR:\r\n            return {\r\n                ...state,\r\n                error: payload,\r\n                data: null,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    };\r\n};","export const types = Object.freeze({\r\n    LIST_START_FETCHING: 'LIST_START_FETCHING',\r\n    LIST_STOP_FETCHING: 'LIST_STOP_FETCHING',\r\n    LIST_SET_FETCHING_ERROR: 'LIST_SET_FETCHING_ERROR',\r\n    LIST_FILL: 'LIST_FILL',\r\n\r\n    LIST_FETCH_ASYNC: 'LIST_FETCH_ASYNC'\r\n})","import { types } from './types';\r\n\r\nconst initialState = {\r\n    data: null,\r\n    isFetching: false,\r\n    error: null,\r\n}\r\n\r\nexport const listReducer = (state = initialState, {type, payload}) => {\r\n    switch (type) {\r\n        case types.LIST_START_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: true,\r\n            };\r\n        case types.LIST_STOP_FETCHING:\r\n            return {\r\n                ...state,\r\n                isFetching: false,\r\n            };\r\n        case types.LIST_SET_FETCHING_ERROR:\r\n            return {\r\n                ...state,\r\n                error: payload,\r\n                data: null,\r\n            };\r\n        case types.LIST_FILL:\r\n            return {\r\n                ...state,\r\n                data: payload.reverse(),\r\n                error: null,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","export const types = Object.freeze({\r\n    GLOBALIZED_NEW_TASK: 'GLOBALIZED_NEW_TASK',\r\n    GLOBALIZED_SELECT_TASK: 'GLOBALIZED_SELECT_TASK',\r\n    GLOBALIZED_HIDE_TASK: 'GLOBALIZED_HIDE_TASK',\r\n})","import { types } from './types';\r\n\r\nconst initialState = {\r\n    isShownSelectedCard: false,\r\n    isShownBlankCard: false,\r\n    filteredData: null,\r\n};\r\n\r\nexport const globalizedReducer = (state = initialState, {type, payload}) => {\r\n    switch (type) {\r\n        case types.GLOBALIZED_NEW_TASK:\r\n            return {\r\n                isShownBlankCard: true,\r\n                isShownSelectedCard: false,\r\n                filteredData: null,\r\n            };\r\n        case types.GLOBALIZED_SELECT_TASK:\r\n            return {\r\n                isShownBlankCard: false,\r\n                isShownSelectedCard: true,\r\n                filteredData: payload,\r\n            }\r\n        case types.GLOBALIZED_HIDE_TASK:\r\n            return {\r\n                isShownBlankCard: false,\r\n                isShownSelectedCard: false,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import {combineReducers} from 'redux';\r\n\r\n//Reducers\r\nimport {taskReducer as task} from '../bus/taskCard/reducer';\r\nimport {listReducer as list} from '../bus/taskList/reducer';\r\nimport {globalizedReducer as globalized} from '../bus/globalized/reducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n    task,\r\n    list,\r\n    globalized,\r\n});","// Core\r\nimport { compose } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\n\r\nexport const logger = createLogger({\r\n  duration: true,\r\n  collapsed: true,\r\n  colors: {\r\n    title: (action) => {\r\n      return action.error ? 'firebrick' : 'deepskyblue';\r\n    },\r\n    prevState: () => '#1C5FAF',\r\n    action:    () => '#149945',\r\n    nextState: () => '#A47104',\r\n    error:     () => '#ff0005',\r\n  }\r\n});\r\n\r\nconst developmentEnvironment = process.env.NODE_ENV === 'development';\r\nconst devtools = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\r\nconst composeEnhancers = developmentEnvironment && devtools ? devtools : compose;\r\n\r\nconst middleware = [thunk];\r\n\r\nif (developmentEnvironment) {\r\n  middleware.push(logger);\r\n}\r\n\r\nexport { composeEnhancers, middleware };\r\n","  // Core\r\n  import { createStore, applyMiddleware } from 'redux';\r\n\r\n  // Other\r\n  import { rootReducer } from './rootReducer';\r\n  import {\r\n    middleware,\r\n    composeEnhancers\r\n  } from './middleware';\r\n  \r\n  export const store = createStore(\r\n    rootReducer,\r\n    composeEnhancers(applyMiddleware(...middleware))\r\n  )\r\n  ","export const root = 'https://lab.lectrum.io/rtx/api';","import { root } from './config';\r\n\r\nexport const api = Object.freeze({\r\n    todos: {\r\n        getFetch: () => {\r\n            return fetch(`${root}/todos`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'x-user': 'tyshko',\r\n                },\r\n            });\r\n        },\r\n        addFetch: (payload) => {\r\n            return fetch(`${root}/todos`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'x-user': 'tyshko',\r\n                },\r\n                body: JSON.stringify(payload),\r\n            });\r\n        },\r\n        editFetch: (payload, hash) => {\r\n            return fetch(`${root}/todos/${hash}`,{\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'x-user': 'tyshko',\r\n                },\r\n                body: JSON.stringify(payload),\r\n            })\r\n        },\r\n        removeFetch: (hash) => {\r\n            return fetch(`${root}/todos/${hash}`,{\r\n                method: 'DELETE',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'x-user': 'tyshko',\r\n                },\r\n            })\r\n        },\r\n    },\r\n})","import { types } from './types';\r\nimport { api } from '../../api/index';\r\n\r\nexport const listActions = {\r\n    startFetching: () => {\r\n        return {\r\n            type: types.LIST_START_FETCHING,\r\n        }\r\n    },\r\n    stopFetching: () => {\r\n        return {\r\n            type: types.LIST_STOP_FETCHING,\r\n        }\r\n    },\r\n    setFetchingError: (error) => {\r\n        return {\r\n            type: types.LIST_SET_FETCHING_ERROR,\r\n            payload: error,\r\n            error: true,\r\n        }\r\n    },\r\n    fillList: (payload) => {\r\n        return {\r\n            type: types.LIST_FILL,\r\n            payload,\r\n        }\r\n    },\r\n\r\n\r\n    getListFetch: () => async(dispatch) => {\r\n        dispatch(listActions.startFetching());\r\n\r\n        const response = await api.todos.getFetch();\r\n\r\n        if (response.status === 200) {\r\n            const {data} = await response.json();\r\n\r\n            dispatch(listActions.fillList(data));\r\n        } else {\r\n            const error = {\r\n                status: response.error,\r\n            };\r\n\r\n            dispatch(listActions.setFetchingError(error));\r\n        }\r\n        dispatch(listActions.stopFetching());\r\n    }\r\n};","import { types } from './types';\r\n\r\nexport const globalizedActions = {\r\n    showNewTask: () => {\r\n        return {\r\n            type: types.GLOBALIZED_NEW_TASK,\r\n        }\r\n    },\r\n    showSelectedTask: (payload) => {\r\n        return {\r\n            type: types.GLOBALIZED_SELECT_TASK,\r\n            payload,\r\n        }\r\n    },\r\n    hideTask: () => {\r\n        return {\r\n            type: types.GLOBALIZED_HIDE_TASK,\r\n        }\r\n    }\r\n}","import { useSelector, useDispatch } from 'react-redux';\r\nimport { useListFetch } from '../../taskList/hooks/useListFetch';\r\nimport { globalizedActions } from '../actions';\r\n\r\nexport const useGlobalizedSet = () => {\r\n    const dispatch = useDispatch();\r\n    const { data, isFetching, error, receivedData } = useListFetch();\r\n\r\n    const {\r\n        isShownBlankCard,\r\n        isShownSelectedCard,\r\n        filteredData,\r\n    } = useSelector((state) => state.globalized);\r\n\r\n    const handleNewTask = () => {\r\n        dispatch(globalizedActions.showNewTask());\r\n    };\r\n\r\n    const handleSelectItem = (hash) => {\r\n        const [filteredData] = data.filter((item) => {\r\n            return item.hash === hash});\r\n        dispatch(globalizedActions.showSelectedTask(filteredData));\r\n    };\r\n\r\n    return {\r\n        data,\r\n        isFetching,\r\n        error,\r\n        receivedData,\r\n        isShownBlankCard,\r\n        handleNewTask,\r\n        isShownSelectedCard,\r\n        handleSelectItem,\r\n        filteredData,\r\n    }\r\n}","import { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { listActions } from '../actions';\r\n\r\nexport const useListFetch = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(listActions.getListFetch());\r\n    }, [dispatch]);\r\n\r\n    const {\r\n        data,\r\n        isFetching,\r\n        error,\r\n    } = useSelector((state) => state.list);\r\n\r\n    const receivedData = () => {\r\n        if (!isFetching && data && data.length !== 0) {\r\n            return data;\r\n        };\r\n    };\r\n\r\n    return {\r\n        data,\r\n        isFetching,\r\n        error,\r\n        receivedData,\r\n    }\r\n}","import { api } from '../../api';\r\nimport { types } from './types';\r\n\r\nexport const taskActions = {\r\n    // Sync\r\n    addTask: (payload) => {\r\n        return {\r\n            type: types.TASK_ADD,\r\n            payload,\r\n        }\r\n    },\r\n    editTask: (payload) => {\r\n        return {\r\n            type: types.TASK_EDIT,\r\n            payload,\r\n        }\r\n    },\r\n    removeTask: () => {\r\n        return {\r\n            type: types.TASK_REMOVE,\r\n        }\r\n    },\r\n    startFetching: () => {\r\n        return {\r\n            type: types.TASK_START_FETCHING,\r\n        }\r\n    },\r\n    stopFetching: () => {\r\n        return {\r\n            type: types.TASK_STOP_FETCHING,\r\n        }\r\n    },\r\n    setFetchingError: (error) => {\r\n        return {\r\n            type: types.TASK_SET_FETCHING_ERROR,\r\n            payload: error,\r\n            error: true,\r\n        }\r\n    },\r\n\r\n    // Async\r\n    addTaskFetch: (payload) => async(dispatch) => {\r\n        dispatch(taskActions.startFetching());\r\n\r\n        const response = await api.todos.addFetch(payload);\r\n\r\n        if (response.status === 201) {\r\n            const {data} = await response.json();\r\n\r\n            dispatch(taskActions.addTask(data));\r\n        } else {\r\n            const error = {\r\n                status: response.status,\r\n            };\r\n            dispatch(taskActions.setFetchingError(error));\r\n        }\r\n        dispatch(taskActions.stopFetching());\r\n    },\r\n\r\n    editTaskFetch: (payload, hash) => async(dispatch) => {\r\n        dispatch(taskActions.startFetching());\r\n\r\n        const response = await api.todos.editFetch(payload, hash);\r\n\r\n        if (response.status === 200) {\r\n            const {data} = await response.json();\r\n\r\n            dispatch(taskActions.editTask(data));\r\n        } else {\r\n            const error = {\r\n                status: response.status,\r\n            };\r\n            dispatch(taskActions.setFetchingError(error));\r\n        }\r\n        dispatch(taskActions.stopFetching());\r\n    },\r\n\r\n    removeTaskFetch: (hash) => async(dispatch) => {\r\n        dispatch(taskActions.startFetching());\r\n\r\n        const response = await api.todos.removeFetch(hash);\r\n\r\n        if (response.status === 204) {\r\n            dispatch(taskActions.removeTask());\r\n        } else {\r\n            const error = {\r\n                status: response.status,\r\n            };\r\n            dispatch(taskActions.setFetchingError(error));\r\n        }\r\n        dispatch(taskActions.stopFetching());\r\n    },\r\n};","export const initialValues = {\r\n    completed: false,\r\n    title: '',\r\n    description: '',\r\n    deadline: '',\r\n    tag: '',\r\n    checklist: [\r\n        {\r\n            \"title\": \"mockup\",\r\n            \"completed\": false,\r\n        }\r\n    ]\r\n};","import * as Yup from 'yup';\r\n\r\nexport   const validationSchema = Yup.object().shape({\r\n    title: Yup.string()\r\n      .min(3, 'Task title is too short')\r\n      .required('Task title field is required'),\r\n    tag: Yup.string()\r\n      .required('Task tag field is required'),\r\n});","export const tagsArray = [\r\n    { name: \"Sketch\", className: \"first\" },\r\n    { name: \"Spotify\", className: \"second\" },\r\n    { name: \"Dribble\", className: \"third\" },\r\n    { name: \"Behance\", className: \"fourth\" },\r\n    { name: \"UX\", className: \"fifth\" },\r\n];","import React from 'react';\r\nimport cx from 'classnames';\r\n\r\nimport { tagsArray } from '../../sharedElements/tagsArray';\r\n\r\nexport const Tag = (props) => {\r\n\r\n    const tagsJsx = tagsArray.map((item, i) => {\r\n      const classTag = cx({\r\n        \"selected\": item.name === props.formik.values.tag,\r\n      });\r\n\r\n        return (\r\n          <span\r\n            name=\"tag\"\r\n            key={i}\r\n            className={`tag ${item.className} ${classTag}`}\r\n            id={item.name}\r\n            onClick={(row) => {\r\n              props.setFieldValue(\"tag\", row.target.id);\r\n            }}\r\n          >\r\n            {item.name}\r\n          </span>\r\n        );\r\n    })\r\n    \r\n    return (\r\n        <>\r\n            {tagsJsx}\r\n        </>\r\n    )\r\n};","import React from \"react\";\r\nimport { Formik, Form } from \"formik\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"../../styles/index.scss\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nimport { useTaskFetch } from \"./hooks/useTaskFetch\";\r\n\r\nimport { Tag } from './components/tag';\r\n\r\nexport const TaskCard = () => {\r\n  const {\r\n    formik,\r\n    startDate,\r\n    handleStartDate,\r\n    handleCompleted,\r\n    isShownSelectedCard,\r\n    buttonCompleted,\r\n    setFieldValue,\r\n    handleDeleteTask,\r\n  } = useTaskFetch();\r\n\r\n  return (\r\n    <Formik>\r\n      <div className=\"task-card\">\r\n        <Form onSubmit={formik.handleSubmit} onReset={formik.handleReset}>\r\n          <div className=\"head\">\r\n            <button\r\n              className={buttonCompleted}\r\n              type=\"button\"\r\n              onClick={handleCompleted}\r\n            >\r\n              Mark as complete\r\n            </button>\r\n            {isShownSelectedCard && (\r\n              <button\r\n                name=\"remove\"\r\n                className=\"button-remove-task\"\r\n                onClick={handleDeleteTask}\r\n              />\r\n            )}\r\n          </div>\r\n          <div className=\"content\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Task title\"\r\n              className=\"title\"\r\n              name=\"title\"\r\n              onChange={formik.handleChange}\r\n              value={formik.values.title}\r\n            />\r\n            <div className=\"deadline\">\r\n              <span className=\"label\">Due to</span>\r\n              <span\r\n                className=\"date\"\r\n                name=\"deadline\"\r\n                value={formik.values.deadline}\r\n              >\r\n                <DatePicker\r\n                  selected={startDate}\r\n                  onChange={(date) => handleStartDate(date)}\r\n                  minDate={new Date()}\r\n                  dateFormat=\"MMMM d, yyyy\"\r\n                />\r\n              </span>\r\n            </div>\r\n            <div className=\"description\">\r\n              <span className=\"label\">Description</span>\r\n              <textarea\r\n                className=\"text\"\r\n                placeholder=\"Describe your event\"\r\n                name=\"description\"\r\n                onChange={formik.handleChange}\r\n                value={formik.values.description}\r\n              ></textarea>\r\n            </div>\r\n            <div className=\"checklist\">\r\n              <span className=\"label\">Checklist</span>\r\n              <div className=\"sub-tasks\">\r\n                <div className=\"sub-task completed\">\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"checklist\"\r\n                    onChange={formik.handleChange}\r\n                    value={formik.values.checklist[0].title}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"tags\">\r\n              <Tag setFieldValue={setFieldValue} formik={formik} />\r\n            </div>\r\n            {(formik.errors.title || formik.errors.tag) && formik.dirty && (\r\n              <div className=\"errors\">\r\n                <p className=\"errorMessage\">{formik.errors.title}</p>\r\n                <p className=\"errorMessage\">{formik.errors.tag}</p>\r\n              </div>\r\n            )}\r\n            <div className=\"form-controls\">\r\n              <button className=\"button-reset-task\" type=\"reset\">\r\n                Reset\r\n              </button>\r\n              <button className=\"button-save-task\" type=\"submit\">\r\n                Save\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </Form>\r\n      </div>\r\n    </Formik>\r\n  );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useFormik } from 'formik';\r\nimport cx from 'classnames';\r\n\r\nimport { taskActions } from \"../actions\";\r\nimport { listActions } from \"../../taskList/actions\";\r\nimport { globalizedActions } from \"../../globalized/actions\";\r\n\r\nimport { initialValues } from \"./formElements/initialValues\";\r\nimport { validationSchema } from './formElements/validationSchema';\r\n\r\nexport const useTaskFetch = () => {\r\n  const dispatch = useDispatch();\r\n  \r\n  const {\r\n    isShownSelectedCard,\r\n    filteredData,\r\n  } = useSelector((state) => state.globalized);\r\n  \r\n  const date = filteredData && new Date(Date.parse(filteredData.deadline));\r\n\r\n  const [startDate, setStartDate] = useState(\r\n    filteredData\r\n      ? date\r\n      : new Date(new Date().setHours(23, 59, 59, 999))\r\n  );\r\n  const [completedTask, setCompleted] = useState(filteredData ? filteredData.completed : false);\r\n\r\n  const formik = useFormik({\r\n    enableReinitialize: true,\r\n    initialValues: filteredData ? filteredData : initialValues,\r\n    \r\n    onSubmit: values => {\r\n      if (isShownSelectedCard) {\r\n        const formattedValues = {\r\n          \"completed\": values.completed,\r\n          \"title\": values.title,\r\n          \"description\": values.description,\r\n          \"deadline\": values.deadline,\r\n          \"tag\": values.tag,\r\n          \"checklist\": [\r\n            {\r\n              \"title\": values.checklist[0].title,\r\n              \"completed\": values.checklist[0].completed,\r\n              \"hash\": values.checklist[0].hash,\r\n            }\r\n          ]\r\n        }\r\n        dispatch(taskActions.editTaskFetch(formattedValues, values.hash));\r\n      } else {\r\n        dispatch(taskActions.addTaskFetch(values));\r\n      };\r\n      setTimeout(() => {\r\n        dispatch(listActions.getListFetch());\r\n      }, 300);\r\n      dispatch(globalizedActions.hideTask());\r\n    },\r\n\r\n    validationSchema: validationSchema,\r\n  });\r\n\r\n  const handleCompleted = () => {\r\n    completedTask === true ? setCompleted(false) : setCompleted(true);\r\n  };\r\n\r\n  const handleStartDate = (date) => {\r\n    setStartDate(date);\r\n  };\r\n\r\n  const handleDeleteTask = (e) => {\r\n    e.preventDefault();\r\n    dispatch(taskActions.removeTaskFetch(formik.values.hash));\r\n    dispatch(listActions.getListFetch());\r\n    dispatch(globalizedActions.hideTask());\r\n  };\r\n\r\n  useEffect(() => filteredData ? setStartDate(new Date(Date.parse(filteredData.deadline))) : undefined, [filteredData]);\r\n  useEffect(() => filteredData ? setCompleted(filteredData.completed) : undefined, [filteredData]);\r\n\r\n  formik.values.deadline = startDate.toISOString();\r\n  formik.values.completed = completedTask;\r\n\r\n  const buttonCompleted = cx({\r\n    \"button-complete-task\": true,\r\n    \"completed\": completedTask,\r\n  });\r\n\r\n  const {setFieldValue} = formik;\r\n\r\n  return {\r\n      formik,\r\n      startDate,\r\n      handleCompleted,\r\n      filteredData,\r\n      isShownSelectedCard,\r\n      handleStartDate,\r\n      buttonCompleted,\r\n      setFieldValue,\r\n      handleDeleteTask,\r\n  };\r\n};","import React from 'react';\r\nimport moment from 'moment';\r\nimport cx from 'classnames';\r\nimport { tagsArray } from '../sharedElements/tagsArray';\r\n\r\nexport const TaskList = (props) => {\r\n    const { data, isFetching, error, receivedData, handleSelectItem } = props;\r\n\r\n  if (error && error.status === 404) {\r\n      return <p>Not Found</p>;\r\n  };\r\n  if (error && error.status !== 404) {\r\n      return <p>Something went wrong</p>;\r\n  };\r\n  const spinnerJsx = isFetching && (\r\n      <div className=\"forecast\">\r\n          <p className='message'>Loading data from api</p>\r\n      </div>\r\n  );\r\n  const listJsx = receivedData() && data.map((item) => {\r\n    \r\n    const {title, deadline, tag, hash, completed} = item;\r\n    const [tagTypeArray] = tagsArray.filter(element => element.name === tag);;\r\n\r\n    const dayFormatted = moment(deadline).format('MMMM D, yyyy');\r\n    \r\n    const taskCompleted = cx({\r\n      \"task\": true,\r\n      \"completed\": completed,\r\n  });\r\n\r\n    return (\r\n      <div className={taskCompleted} key={hash} onClick={() => handleSelectItem(hash)}>\r\n        <span className=\"title\">{title}</span>\r\n        <div className=\"meta\">\r\n          <span className=\"deadline\">{dayFormatted}</span>\r\n          <span className={`tag ${tagTypeArray.className}`}>{tag}</span>\r\n        </div>\r\n      </div>\r\n    )\r\n  });\r\n\r\n  if (!receivedData()) {\r\n    return (\r\n      <div className=\"list empty\"></div>\r\n    )\r\n  } else {\r\n    return (\r\n      <div className=\"list\">\r\n        <div className=\"tasks\">\r\n          {spinnerJsx}\r\n          {listJsx}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}","// Core\r\nimport React from \"react\";\r\n\r\n// Styles\r\nimport \"./styles/index.scss\";\r\n\r\nimport { useGlobalizedSet } from \"./bus/globalized/hooksGlobalized/useGlobalizedSet\";\r\n\r\n// Components\r\nimport { TaskCard } from \"../source/bus/taskCard\";\r\nimport { TaskList } from \"../source/bus/taskList\";\r\n\r\nexport const Source = () => {\r\n  const {\r\n    data,\r\n    isFetching,\r\n    error,\r\n    receivedData,\r\n    isShownBlankCard,\r\n    handleNewTask,\r\n    isShownSelectedCard,\r\n    handleSelectItem,\r\n  } = useGlobalizedSet();\r\n\r\n  return (\r\n    <>\r\n      <main>\r\n        <div className=\"controls\">\r\n          <button className=\"button-create-task\" onClick={handleNewTask}>New Task</button>\r\n        </div>\r\n        <div className=\"wrap\">\r\n          <TaskList\r\n            data={data}\r\n            isFetching={isFetching}\r\n            error={error}\r\n            receivedData={receivedData}\r\n            handleSelectItem={handleSelectItem}\r\n          />\r\n          {isShownSelectedCard && <TaskCard />}\r\n          {isShownBlankCard && <TaskCard />}\r\n        </div>\r\n      </main>\r\n      <footer>\r\n        <span>© 2020 Lectrum LLC - All Rights Reserved.</span>\r\n      </footer>\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './source/init/store';\r\nimport { Source } from './source';\r\n\r\nexport const App = () => {\r\n  return (\r\n    <>\r\n      <Provider store={store}>\r\n        <Source />\r\n      </Provider>\r\n    </>\r\n  )\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport { App } from './app';\r\nimport * as serviceWorker from './serviceWorker';\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}